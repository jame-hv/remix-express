{
  "Remix Action": {
    "prefix": "action",
    "body": [
      "import { json } from \"@remix-run/node\";",
      "import type { ActionFunctionArgs } from \"@remix-run/node\";",
      "",
      "export async function action({ request, params }: ActionFunctionArgs) {",
      "  const formData = await request.formData();",
      "  $1",
      "  return json({ success: true });",
      "}"
    ],
    "description": "Create a simple Remix action function"
  },
  "Remix Loader": {
    "prefix": "loader",
    "body": [
      "import { json } from \"@remix-run/node\";",
      "import type { LoaderFunctionArgs } from \"@remix-run/node\";",
      "",
      "export async function loader({ request, params }: LoaderFunctionArgs) {",
      "  $1",
      "  return json({",
      "    $2",
      "  });",
      "}"
    ],
    "description": "Create a simple Remix loader function"
  },
  "Remix Component": {
    "prefix": "new-component",
    "body": [
      "import { useLoaderData } from \"@remix-run/react\";",
      "import type { LoaderFunctionArgs } from \"@remix-run/node\";",
      "import { json } from \"@remix-run/node\";",
      "",
      "export async function loader({ request, params }: LoaderFunctionArgs) {",
      "  $1",
      "  return json({",
      "    $2",
      "  });",
      "}",
      "",
      "export default function ${3:ComponentName}() {",
      "  const data = useLoaderData<typeof loader>();",
      "",
      "  return (",
      "    <div>",
      "      $4",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "Create a simple Remix component with loader"
  },
  "Remix Form": {
    "prefix": "new-form",
    "body": [
      "import { Form, useActionData, useNavigation } from \"@remix-run/react\";",
      "import { Button } from \"~/components/ui/button\";",
      "",
      "export default function ${1:FormComponent}() {",
      "  const actionData = useActionData<typeof action>();",
      "  const navigation = useNavigation();",
      "  const isSubmitting = navigation.state === \"submitting\";",
      "",
      "  return (",
      "    <Form method=\"post\" className=\"space-y-4\">",
      "      <div>",
      "        <label htmlFor=\"${2:fieldName}\" className=\"block text-sm font-medium\">",
      "          ${3:Field Label}",
      "        </label>",
      "        <input",
      "          type=\"${4:text}\"",
      "          id=\"${2:fieldName}\"",
      "          name=\"${2:fieldName}\"",
      "          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\"",
      "          $5",
      "        />",
      "        {actionData?.errors?.${2:fieldName} && (",
      "          <p className=\"text-red-500 text-xs mt-1\">{actionData.errors.${2:fieldName}}</p>",
      "        )}",
      "      </div>",
      "",
      "      <Button type=\"submit\" disabled={isSubmitting}>",
      "        {isSubmitting ? \"Submitting...\" : \"${6:Submit}\"}",
      "      </Button>",
      "    </Form>",
      "  );",
      "}"
    ],
    "description": "Create a Remix form with validation"
  },
  "Remix Error Boundary": {
    "prefix": "remix-error-boundary",
    "body": [
      "import { useRouteError, isRouteErrorResponse } from \"@remix-run/react\";",
      "",
      "export function ErrorBoundary() {",
      "  const error = useRouteError();",
      "",
      "  if (isRouteErrorResponse(error)) {",
      "    return (",
      "      <div className=\"flex min-h-screen flex-col items-center justify-center p-4 text-center\">",
      "        <h1 className=\"text-3xl font-bold\">{error.status} - {error.statusText}</h1>",
      "        <p className=\"mt-4\">{error.data}</p>",
      "      </div>",
      "    );",
      "  }",
      "",
      "  const errorMessage = error instanceof Error ? error.message : \"Unknown error\";",
      "",
      "  return (",
      "    <div className=\"flex min-h-screen flex-col items-center justify-center p-4 text-center\">",
      "      <h1 className=\"text-3xl font-bold\">Something went wrong</h1>",
      "      <p className=\"mt-4\">{errorMessage}</p>",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "Create a Remix error boundary component"
  },

  "Remix Prisma Query": {
    "prefix": "remix-prisma",
    "body": [
      "import { db } from \"~/lib/db.server\";",
      "",
      "export async function get${1:Model}(id: string) {",
      "  return db.${2:model}.findUnique({",
      "    where: { id },",
      "    include: {",
      "      $3",
      "    }",
      "  });",
      "}",
      "",
      "export async function create${1:Model}(data: $4) {",
      "  return db.${2:model}.create({",
      "    data,",
      "  });",
      "}",
      "",
      "export async function update${1:Model}(id: string, data: $5) {",
      "  return db.${2:model}.update({",
      "    where: { id },",
      "    data,",
      "  });",
      "}",
      "",
      "export async function delete${1:Model}(id: string) {",
      "  return db.${2:model}.delete({",
      "    where: { id },",
      "  });",
      "}"
    ],
    "description": "Create Prisma CRUD functions for Remix"
  }
}
